1.序列化的底层是怎样实现的
无参构造  属性public protected
扩展方法
writeObject
writeObjectNoData
readObject
readObjectNoData

2.sync底层是如何实现的
public class Test4 {

    private static Object LOCK = new Object();

    public static int main(String[] args) {
        synchronized (LOCK){
            System.out.println("Hello World");
        }
        return 1;
    }
}

对象锁是通过monitorenter和monitorexit来实现的，这两个字节码代表的是啥意思：大致意思是，每个对象都有一个monitor监视器，调用monitorenter就是尝试获取这个对象，成功获取到了就将值+1，离开就将值减1。如果是线程重入，在将值+1，说明monitor对象是支持可重入的。如果synchronize在方法上，那就没有上面两个指令，取而代之的是有一个ACC_SYNCHRONIZED修饰，表示方法加锁了。它会在常量池中增加这个一个标识符，获取它的monitor，所以本质上是一样的。monitor调用的是操作系统底层的互斥量(mutex),开销较大。

3.tomcat等集群如何保证同步
tomcat组件
Manager：将操作的信息记录下来
Cluster：序列化信息
Tribes：将信息发送出去

message send 
listener

4.redis等nosql
常见数据类型
redis锁
lua
事务

5.快速排序 二分查找 链表等基础算法
package com.iteller.kl.math.sort;

import java.util.Arrays;

/**
 * @author: 18060903(iTeller_zc)
 * date:2020/3/23 11:37
 * description:
 * 1.找基准索引(数组基准索引左边元素小于该基准索引元素，基准索引右边元素大于该基准索引元素)
 * 2.左排序(递归)
 * 3.右排序(递归)
 */
public class MyQuickSort {

    public static void main(String[] args){
        int[] inputArrays = {3,8,13,2,5,7,9};
        System.out.println("original arrays :" + Arrays.toString(inputArrays));
        quickSort(inputArrays, 0, inputArrays.length-1);
    }

    private static void quickSort(int[] inputArrays, int start, int end) {
        if(start < end){
            int baseIndex = getBaseIndex(inputArrays, start, end);
            quickSort(inputArrays, start, baseIndex-1);
            quickSort(inputArrays, baseIndex+1, end);
        }
    }

    private static int getBaseIndex(int[] inputArrays, int head, int tail) {
        //临时基准数据
        int temp = inputArrays[head];
        System.out.println("before arrays:" + Arrays.toString(inputArrays) + ", head:" + head + ", tail:" + tail + ",temp:" + temp);
        while(head < tail){
            //队尾元素小于等于基准数据，队尾向前移动
            while(head < tail &&  temp <= inputArrays[tail]){
                tail --;
            }
            //System.out.println("get smallest from right head index:" + head +", tail index:" + tail);
            //如果队尾数据小于基准数据，队尾元素赋值给队首
            inputArrays[head] = inputArrays[tail];
            //队首元素小于等于基准数据，队首向后移动
            while (head < tail && temp >= inputArrays[head]){
                head ++;
            }
            //System.out.println("get smallest from left, head index:" + head +", tail index:" + tail);
            //如果队首数据大于基准数据，队首数据赋值给队尾
            inputArrays[tail] = inputArrays[head];
        }
        //重新赋值给队首基准数据，队尾队首位置重叠
        inputArrays[head] = temp;
        System.out.println("after arrays:" + Arrays.toString(inputArrays) + ", head:" + head + ", tail:" + tail + ", temp:" + temp);
        return head;//返回队首位置索引
    }
}

6.数据结构
数组
集合

7.乐观锁 悲观锁和其他锁

9.b树 b+树 b*树
B+:叶子节点查询终结，叶子节点增加了链表指针

所有关键字在叶子节点的链表中，并且是有序的，
搜索只在叶子节点命中，
非叶子节点相当于叶子节点的索引层，叶子节点是存储关键字的数据层

B:查询效率不稳定
基本特点:
关键字遍布所有节点，关键字只存在于一个节点中, 搜索有可能在非叶子节点结束
键值区(主键) 指针区(指向叶子节点) 数据区(主键外的数据)
B*:非叶子节点增加指向兄弟节点的指针

10.并发包 juc
线程安全集合
cas
aqs

11.concurrenthashmap 分段式锁

12.设计模式
spring中常见设计模式

13.jvm内存模型 调优参数 gc java内存模型 类加载机制
jvm:
			运行时数据区

   方法区(method area)      虚拟机栈(vm stack)             本地方法栈(native method stack)
       ^                           ^^^^                                 ^^^^
    线程共享数据区                            线程隔离数据区
       ^                                          ^^^^
   堆(heap)                                   程序计数器(program counter register)
-------------------------------------------------------------------------------------
       ^                                                 ^
       |                                                 |
       ▽                                                ▽
      执行引擎------------------------------------------>本地库接口---->本地方法库

1、程序计数器： 为了线程切换能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。计数器记录的是正在执行的虚拟机字节码指令的地址。
  2、Java虚拟机栈： 每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接（例如多态就要动态链接以确定引用的状态）、方法出口等信息。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）。
  其中 64 位长度的 long 和 double 类型的数据会占用 2 个局部变量空间（Slot），其余的数据类型只占用 1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。
  3、本地方法栈： Java 虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。
  4、Java 堆： Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”。
  5、方法区： 方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量（final ）、静态变量（static）、即时编译器编译后的代码等数据。
  一个类中主要有：常量、成员变量、静态变量、局部变量。其中常量与静态变量位于方法区，成员变量位于 Java 堆，局部变量位于 Java 虚拟机栈。
  运行时常量池： 是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。

  Java内存模型：每个线程都有一个工作内存，线程只可以修改自己工作内存中的数据，然后再同步回主内存，主内存由多个线程共享。

java内存模型：主内存 本地工作内存

gc:
算法
标记-清楚算法 不连续 碎片 递归效率低
标记-压缩算法 连续 复制性能
复制算法 一半闲置
分代收集算法***
minor gc:
young generation:eden from to
old generation:
第一次:eden 存活移动到from
第二次:eden from存活 移动到to
第三次:eden to-->from
周而复始：from->to超过阈值from to复制到old区
full gc:触发各种条件

垃圾收集器
串行收集器:单线程，可能较长时间卡顿
-XX:+UseSerialGC
并行收集器：
-XX:+UseParNewGC（new代表新生代，所以适用于新生代）
-XX:ParallelGCThreads 限制线程数量
Parallel收集器
-XX:+UseParallelGC  
CMS收集器
G1收集器

类加载：
委派模型

14.线程池
参数

15.mysql 索引等 mycat分库分表
主键索引
辅助索引
索引失效

16.mq zk等中间件
消息补偿
选举算法
zk分布式锁

17.netty 网络通信nio
channel
handler
eventgroup
selector等

18.路人甲java

